State 0:
automate' -> . automate [ # ]
-- On INPUT_SYM shift to state 1
-- On inputsymbols shift to state 6
-- On declaration shift to state 19
-- On automate shift to state 42

State 1:
inputsymbols -> INPUT_SYM . suitelettres_nonvide [ STACK_SYM ]
-- On LETTRE shift to state 2
-- On suitelettres_nonvide shift to state 5

State 2:
suitelettres_nonvide -> LETTRE . [ STATES STACK_SYM INIT_STATE ]
suitelettres_nonvide -> LETTRE . COMMA suitelettres_nonvide [ STATES STACK_SYM INIT_STATE ]
-- On COMMA shift to state 3
-- On STATES reduce production suitelettres_nonvide -> LETTRE 
-- On STACK_SYM reduce production suitelettres_nonvide -> LETTRE 
-- On INIT_STATE reduce production suitelettres_nonvide -> LETTRE 

State 3:
suitelettres_nonvide -> LETTRE COMMA . suitelettres_nonvide [ STATES STACK_SYM INIT_STATE ]
-- On LETTRE shift to state 2
-- On suitelettres_nonvide shift to state 4

State 4:
suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide . [ STATES STACK_SYM INIT_STATE ]
-- On STATES reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 
-- On STACK_SYM reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 
-- On INIT_STATE reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 

State 5:
inputsymbols -> INPUT_SYM suitelettres_nonvide . [ STACK_SYM ]
-- On STACK_SYM reduce production inputsymbols -> INPUT_SYM suitelettres_nonvide 

State 6:
declaration -> inputsymbols . stacksymbols states initialstate initialstack [ TRANSITION ]
-- On STACK_SYM shift to state 7
-- On stacksymbols shift to state 9

State 7:
stacksymbols -> STACK_SYM . suitelettres_nonvide [ STATES ]
-- On LETTRE shift to state 2
-- On suitelettres_nonvide shift to state 8

State 8:
stacksymbols -> STACK_SYM suitelettres_nonvide . [ STATES ]
-- On STATES reduce production stacksymbols -> STACK_SYM suitelettres_nonvide 

State 9:
declaration -> inputsymbols stacksymbols . states initialstate initialstack [ TRANSITION ]
-- On STATES shift to state 10
-- On states shift to state 12

State 10:
states -> STATES . suitelettres_nonvide [ INIT_STATE ]
-- On LETTRE shift to state 2
-- On suitelettres_nonvide shift to state 11

State 11:
states -> STATES suitelettres_nonvide . [ INIT_STATE ]
-- On INIT_STATE reduce production states -> STATES suitelettres_nonvide 

State 12:
declaration -> inputsymbols stacksymbols states . initialstate initialstack [ TRANSITION ]
-- On INIT_STATE shift to state 13
-- On initialstate shift to state 15

State 13:
initialstate -> INIT_STATE . LETTRE [ INIT_STACK ]
-- On LETTRE shift to state 14

State 14:
initialstate -> INIT_STATE LETTRE . [ INIT_STACK ]
-- On INIT_STACK reduce production initialstate -> INIT_STATE LETTRE 

State 15:
declaration -> inputsymbols stacksymbols states initialstate . initialstack [ TRANSITION ]
-- On INIT_STACK shift to state 16
-- On initialstack shift to state 18

State 16:
initialstack -> INIT_STACK . LETTRE [ TRANSITION ]
-- On LETTRE shift to state 17

State 17:
initialstack -> INIT_STACK LETTRE . [ TRANSITION ]
-- On TRANSITION reduce production initialstack -> INIT_STACK LETTRE 

State 18:
declaration -> inputsymbols stacksymbols states initialstate initialstack . [ TRANSITION ]
-- On TRANSITION reduce production declaration -> inputsymbols stacksymbols states initialstate initialstack 

State 19:
automate -> declaration . transitions EOF [ # ]
-- On TRANSITION shift to state 20
-- On transitions shift to state 40

State 20:
transitions -> TRANSITION . translist [ EOF ]
-- On LPAREN shift to state 21
-- On translist shift to state 37
-- On transition shift to state 38
-- On EOF reduce production translist -> 

State 21:
transition -> LPAREN . LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On LETTRE shift to state 22

State 22:
transition -> LPAREN LETTRE . COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On COMMA shift to state 23

State 23:
transition -> LPAREN LETTRE COMMA . lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On LETTRE shift to state 24
-- On lettre_ou_vide shift to state 25
-- On COMMA reduce production lettre_ou_vide -> 

State 24:
lettre_ou_vide -> LETTRE . [ COMMA ]
-- On COMMA reduce production lettre_ou_vide -> LETTRE 

State 25:
transition -> LPAREN LETTRE COMMA lettre_ou_vide . COMMA LETTRE COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On COMMA shift to state 26

State 26:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA . LETTRE COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On LETTRE shift to state 27

State 27:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE . COMMA LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On COMMA shift to state 28

State 28:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA . LETTRE COMMA stack RPAREN [ LPAREN EOF ]
-- On LETTRE shift to state 29

State 29:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE . COMMA stack RPAREN [ LPAREN EOF ]
-- On COMMA shift to state 30

State 30:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA . stack RPAREN [ LPAREN EOF ]
-- On LETTRE shift to state 31
-- On stack shift to state 34
-- On nonemptystack shift to state 36
-- On RPAREN reduce production stack -> 

State 31:
nonemptystack -> LETTRE . [ RPAREN ]
nonemptystack -> LETTRE . SEMICOLON nonemptystack [ RPAREN ]
-- On SEMICOLON shift to state 32
-- On RPAREN reduce production nonemptystack -> LETTRE 

State 32:
nonemptystack -> LETTRE SEMICOLON . nonemptystack [ RPAREN ]
-- On LETTRE shift to state 31
-- On nonemptystack shift to state 33

State 33:
nonemptystack -> LETTRE SEMICOLON nonemptystack . [ RPAREN ]
-- On RPAREN reduce production nonemptystack -> LETTRE SEMICOLON nonemptystack 

State 34:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack . RPAREN [ LPAREN EOF ]
-- On RPAREN shift to state 35

State 35:
transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN . [ LPAREN EOF ]
-- On LPAREN reduce production transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN 
-- On EOF reduce production transition -> LPAREN LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPAREN 

State 36:
stack -> nonemptystack . [ RPAREN ]
-- On RPAREN reduce production stack -> nonemptystack 

State 37:
transitions -> TRANSITION translist . [ EOF ]
-- On EOF reduce production transitions -> TRANSITION translist 

State 38:
translist -> transition . translist [ EOF ]
-- On LPAREN shift to state 21
-- On translist shift to state 39
-- On transition shift to state 38
-- On EOF reduce production translist -> 

State 39:
translist -> transition translist . [ EOF ]
-- On EOF reduce production translist -> transition translist 

State 40:
automate -> declaration transitions . EOF [ # ]
-- On EOF shift to state 41

State 41:
automate -> declaration transitions EOF . [ # ]
-- On # reduce production automate -> declaration transitions EOF 

State 42:
automate' -> automate . [ # ]
-- On # accept automate

